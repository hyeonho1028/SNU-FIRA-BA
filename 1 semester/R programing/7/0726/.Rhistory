lty = 1, col = c('black', 'green', 'blue', 'red'))
xx = exp(x)
plot(x, xx)
xx
xx = exp(x/sum(x))
plot(x, xx)
plot(1:18, xx)
plot(18:27, xx)
plot(18:24, xx)
curve(dnorm(x, 5, 10), add = T)
x = c(957927,	886168,	853650,	598919,	1050793,	1122483,	1085091)
curve(dnorm(x, 5, 10), add = T)
curve(dnorm(x, 5, 10), add = T)
curve(exp(x, 5, 10), add = T)
dnorm(x, 5, 10)
x = c(957927,	886168,	853650,	598919,	1050793,	1122483,	1085091)
y = c(281,	271,	256,	214,	165,	294,	266)
z = c(130616,	94254,	108309,	62699,	72118,	118670,	151413)
xy =c(827028,	791643,	745083,	536004,	978510,	1003518,	933410)
plot(18:24, x/sum(x), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
lines(18:24, y/sum(y), type = 'l', col = 'green', lwd = 2)
lines(18:24, z/sum(z), type = 'l', col = 'blue', lwd = 2)
lines(18:24, xy/sum(xy), type = 'l', col = 'red', lwd = 2)
legend('bottomright', c('All Volume',  'CNY Volume', 'USD Volume', 'Others Volume'),
lty = 1, col = c('black', 'green', 'blue', 'red'))
sep(x, length = 100)
seq(x, length = 100)
seq(3,4, length = 100)
seq(957927, length = 100)
seq(x, length = 100)
seq(x[1:2], length = 100)
seq(x[1], length = 100)
seq(x[1],x[2], length = 100)
seq(x[1],x[2], x[3],length = 100)
seq(x[1],x[2], length = 100)
seq(x[2],x[3],length = 100)
seq(x[3],x[4],length = 100)
seq(x[4],x[5],length = 100)
seq(x[5],x[6],length = 100)
seq(x[6],x[7],length = 100)
a=seq(x[1],x[2], length = 1000)
b=seq(x[2],x[3],length = 1000)
c=seq(x[3],x[4],length = 1000)
d=seq(x[4],x[5],length = 1000)
e=seq(x[5],x[6],length = 1000)
f=seq(x[6],x[7],length = 1000)
sample(a, 300)
paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
aa = paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
sort(a)
aa = paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
plot(18:24, aa/sum(aa), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
aa
aa <- as.numeric(aa)
plot(18:24, aa/sum(aa), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
length(aa)
plot(seq(18, 24, length(300)), aa/sum(aa), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
length(aa)
aa <- as.numeric(aa)
length(aa)
x = c(957927,	886168,	853650,	598919,	1050793,	1122483,	1085091)
a=seq(x[1],x[2], length = 1000)
b=seq(x[2],x[3],length = 1000)
c=seq(x[3],x[4],length = 1000)
d=seq(x[4],x[5],length = 1000)
e=seq(x[5],x[6],length = 1000)
f=seq(x[6],x[7],length = 1000)
aa = paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
length(aa)
aa = paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300), sep = ',')
aa <- as.numeric(aa)
aa = paste(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300), sep = ',')
length(aa)
sample(a, 300)
aa = paste0(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
length(aa)
aa = c(sample(a, 300), sample(b, 300), sample(c, 300), sample(d, 300), sample(e, 300),
sample(f, 300))
length(aa)
aa
plot(seq(18, 24, length(1800)), aa/sum(aa), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
length(aa)
plot(seq(18, 24, length(1800)), aa, type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length(1800)), aa, type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
length(aa)
seq(18, 24, length(1800))
plot(seq(18, 24, length = 1800), aa, type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 1800), aa, type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 1800), aa, type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
aa = c(sample(a, 10), sample(b, 10), sample(c, 10), sample(d, 10), sample(e, 10),
sample(f, 10))
length(aa)
plot(seq(18, 24, length = 60), aa, type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 60), aa/sum(aa), type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 60), aa/sum(aa), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 60), aa/sum(aa), type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 60), aa/sum(aa), type = 'l', lwd = 2, #ylim = c(0.07, 0.2),
xlab = 'dqy', ylab = 'density', main = 'Volume graph per day')
plot(seq(18, 24, length = 60), aa/sum(aa), type = 'l', lwd = 2, #ylim = c(0.07, 0.2),
xlab = 'day', ylab = 'density', main = 'Volume graph per day')
a=seq(y[1],y[2], length = 1000)
b=seq(y[2],y[3],length = 1000)
c=seq(y[3],y[4],length = 1000)
d=seq(y[4],y[5],length = 1000)
e=seq(y[5],y[6],length = 1000)
f=seq(y[6],y[7],length = 1000)
aa = c(sample(a, 10), sample(b, 10), sample(c, 10), sample(d, 10), sample(e, 10),
sample(f, 10))
length(aa)
lines(seq(18, 24, length = 60), aa/sum(aa), type = 'l', col = 'green', lwd = 2)
a=seq(z[1],z[2], length = 1000)
b=seq(z[2],z[3],length = 1000)
c=seq(z[3],z[4],length = 1000)
d=seq(z[4],z[5],length = 1000)
e=seq(z[5],z[6],length = 1000)
f=seq(z[6],z[7],length = 1000)
aa = c(sample(a, 10), sample(b, 10), sample(c, 10), sample(d, 10), sample(e, 10),
sample(f, 10))
length(aa)
lines(seq(18, 24, length = 60), aa/sum(aa), type = 'l', col = 'blue', lwd = 2)
a=seq(xy[1],xy[2], length = 1000)
b=seq(xy[2],xy[3],length = 1000)
c=seq(xy[3],xy[4],length = 1000)
d=seq(xy[4],xy[5],length = 1000)
e=seq(xy[5],xy[6],length = 1000)
f=seq(xy[6],xy[7],length = 1000)
aa = c(sample(a, 10), sample(b, 10), sample(c, 10), sample(d, 10), sample(e, 10),
sample(f, 10))
lines(seq(18, 24, length = 60), aa/sum(aa), type = 'l', col = 'red', lwd = 2)
legend('bottomright', c('All Volume',  'CNY Volume', 'USD Volume', 'Others Volume'),
lty = 1, col = c('black', 'green', 'blue', 'red'))
plot(18:24, x/sum(x), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'dqy',
ylab = 'density', main = 'Volume graph per day')
lines(18:24, y/sum(y), type = 'l', col = 'green', lwd = 2)
lines(18:24, z/sum(z), type = 'l', col = 'blue', lwd = 2)
lines(18:24, xy/sum(xy), type = 'l', col = 'red', lwd = 2)
legend('bottomright', c('All Volume',  'CNY Volume', 'USD Volume', 'Others Volume'),
lty = 1, col = c('black', 'green', 'blue', 'red'))
plot(18:24, x/sum(x), type = 'l', lwd = 2, ylim = c(0.07, 0.2), xlab = 'day',
ylab = 'density', main = 'Volume graph per day')
lines(18:24, y/sum(y), type = 'l', col = 'green', lwd = 2)
lines(18:24, z/sum(z), type = 'l', col = 'blue', lwd = 2)
lines(18:24, xy/sum(xy), type = 'l', col = 'red', lwd = 2)
legend('bottomright', c('All Volume',  'CNY Volume', 'USD Volume', 'Others Volume'),
lty = 1, col = c('black', 'green', 'blue', 'red'))
# 각 일별로 점수 부여
wordcount_top18
score18 = 62+35-23+19+14+10-8-8+2.5+9-4+4+3-2+2+3
score18
# 각 일별로 점수 부여
posDic = readLines("C:/workspace/R/7/study_scraping/posDic.txt")
negDic = readLines("C:/workspace/R/7/study_scraping/negDic.txt")
# 각 일별로 점수 부여
posDic = readLines("C:/workspace/R/7/study_scraping/posDic.txt")
posDic
data18
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
result = sentimental(data18, posDic, negDic)
if(!require(plyr)){install.packages('plyr') ; library(plyr)}
result = sentimental(data18, posDic, negDic)
result
names(result)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
posDic
data18
result = sentimental(data18, posDic, negDic)
sum(result$score)
pos.matches = match(words, posDic
pos.matches = match(words, posDic)
pos.matches = match(words, posDic)
pos.matches
match(words, posDic)
posDic
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
pos.matches = match(sentence, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(sentence, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
result = sentimental(data18, posDic, negDic)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
result$score
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
data_unlist
result = sentimental(data_unlist, posDic, negDic)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어', xlab = c(18, 24)) # 산포도 색생 적용
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
result = sentimental(data18, posDic, negDic)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result = sentimental(data18, posDic, negDic)
sum(result$score)
result = sentimental(data19, posDic, negDic)
sum(result$score)
result = sentimental(data20, posDic, negDic)
sum(result$score)
result = sentimental(data21, posDic, negDic)
sum(result$score)
result = sentimental(data22, posDic, negDic)
sum(result$score)
result = sentimental(data23, posDic, negDic)
sum(result$score)
result = sentimental(data24, posDic, negDic)
sum(result$score)
x = c(143, 11, 43, -55, 13, 92, 118)
plot(18:24, x/sum(x), type = 'l', lwd = 2, #ylim = c(0.07, 0.2), xlab = 'day',
ylab = 'density', main = 'positive and negative score')
plot(18:24, x/sum(x), type = 'l', lwd = 2, xlab = 'day', #ylim = c(0.07, 0.2),
ylab = 'density', main = 'positive and negative score')
result = sentimental(data_unlist, posDic, negDic)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
sentiment_result= table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)
sentiment_result
sum(sentiment_result)
sentiment_result/sum(sentiment_result)
sentiment_result/sum(sentiment_result) * 100
round(sentiment_result/sum(sentiment_result) * 100,1)
?pie
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8, labels = c('긍정 5.7%',
'부정 4.4%', '중립 89.9%'))
library(ggdendro)
if(!require(ggdendro)){install.packages('ggdendro') ; library(ggdendro)}
if(!require(ggdendro)){install.packages('ggdendro') ; library(ggdendro)}
# 유사성 검색 ----
w2v_model %>% closest_to('비트코인')
data_unlist
# 유사성 검색 ----
data_unlist %>% closest_to('비트코인')
if(!require(wordVectors)){install.packages('wordVectors') ; library(wordVectors)}
if(!require(wordVectors)){install.packages('wordVectors') ; library(wordVectors)}
vest)
library(stringi)
library(tidyverse)
library(tidytext)
library(rJava)
library(wordVectors)
library(tsne)
library(g
library(rvest)
library(stringi)
library(tidyverse)
library(tidytext)
library(rJava)
library(wordVectors)
library(tsne)
library(ggplot2)
library(rvest)
library(stringi)
library(tidyverse)
library(tidytext)
library(rJava)
library(wordVectors)
library(tsne)
library(ggplot2)
if(!require(tsne)){install.packages('tsne') ; library(tsne)}
if(!require(tsne)){install.packages('tsne') ; library(tsne)}
if(!require(wordVectors)){install.packages('wordVectors') ; library(wordVectors)}
# 유사성 검색 ----
data_unlist %>% closest_to('비트코인')
library(tidyverse)
if(!require(tidyverse)){install.packages('tidyverse') ; library(tidyverse)}
if(!require(tidyverse)){install.packages('tidyverse') ; library(tidyverse)}
# 유사성 검색 ----
data_unlist %>% closest_to('비트코인')
?closest_to
??closest_to
library(rJava)
library(tidytext)
if(!require(tidytext)){install.packages('tidytext') ; library(tidytext)}
if(!require(tidytext)){install.packages('tidytext') ; library(tidytext)}
if(!require(tidyverse)){install.packages('tidyverse') ; library(tidyverse)}
if(!require(tsne)){install.packages('tsne') ; library(tsne)}
if(!require(wordVectors)){install.packages('wordVectors') ; library(wordVectors)}
if(!require(ggdendro)){install.packages('ggdendro') ; library(ggdendro)}
library(stringi)
library(rvest)
library(stringi)
library(tidyverse)
library(tidytext)
library(rJava)
library(wordVectors)
library(tsne)
library(ggplot2)
# 유사성 검색 ----
data_unlist %>% closest_to('비트코인')
install_github(“bmschmidt/wordVectors”)
library(githubinstall)
install_github(“bmschmidt/wordVectors”)
install_github('bmschmidt/wordVectors')
library(githubinstall)
install_github('bmschmidt/wordVectors')
require(devtools)
install_github("bmschmidt/wordVectors")
install_github("bmschmidt/wordVectors")
install_github("bmschmidt/wordVectors")
library(wordVectors)
install_github("https://github.com/bmschmidt/wordVectors")
install_github("bmschmidt/wordVectors")
data_unlist
scraping_dat$description = gsub('\n|\t|<.*?>|&quot;',' ',scraping_dat$description)
scraping_dat$description = gsub('[^가-힣a-zA-Z]',' ',scraping_dat$description)
scraping_dat$description = gsub(' +',' ',scraping_dat$description)
scraping_dat$description
scraping_dat$X.1
scraping_dat$pubDate
sort(scraping_dat$pubDate)
order(scraping_dat$pubDate)
scraping_dat[order(scraping_dat$pubDate)]
scraping_dat[order(scraping_dat$pubDate),]
scraping_dat = scraping_dat[order(scraping_dat$pubDate),]
data_unlist <- sapply(scraping_dat$description, extractNoun, USE.NAMES = F) %>%
unlist()
data_unlist <- Filter(function(x){nchar(x)>=2}, data_unlist)
data_unlist <- f_gsub(data_unlist)
data_unlist <- Filter(function(x){nchar(x)>=2}, data_unlist)
data_unlist
result = sentimental(data_unlist, posDic, negDic)
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
plot(result$score, col=result$color, ylab = '긍정단어와 부정단어') # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")
sentiment_result
result$remark
table(result$remark)
result$remark
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
table(result$remark)
result$remark
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
result$color
result = sentimental(data_unlist, posDic, negDic)
result
result$score
length(result$score)
plot(seq(18, 24, length = 26472), result$score+1, type = 'l')
plot(seq(18, 24, length = 26472), result$score, type = 'l')
result$score
result$score[1:1000]
sum(result$score[1:1000])
a[1]=sum(result$score[1:1000])
a[2]=sum(result$score[1001:2000])
a[3]=sum(result$score[2001:3000])
a[4]=sum(result$score[3001:4000])
a[5]=sum(result$score[4001:5000])
a[6]=sum(result$score[5001:6000])
a[7]=sum(result$score[6001:7000])
a[8]=sum(result$score[7001:8000])
a[9]=sum(result$score[8001:9000])
a[10]=sum(result$score[9001:10000])
a[11]=sum(result$score[10001:11000])
a[12]=sum(result$score[11001:12000])
a[13]=sum(result$score[12001:13000])
a[14]=sum(result$score[13001:14000])
a[15]=sum(result$score[14001:15000])
a[16]=sum(result$score[15001:16000])
a[17]=sum(result$score[16001:1700])
a[18]=sum(result$score[17001:18000])
a[19]=sum(result$score[18001:19000])
a[20]=sum(result$score[19001:20000])
a[21]=sum(result$score[20001:21000])
a[22]=sum(result$score[21001:22000])
a[23]=sum(result$score[22001:23000])
a[24]=sum(result$score[23001:24000])
a[25]=sum(result$score[24001:25000])
a[26]=sum(result$score[25001:26472])
a
a[1]=sum(result$score[1:1000])
a
sum(result$score[1:1000])
rm(a)
a[1]=sum(result$score[1:1000])
a[2]=sum(result$score[1001:2000])
a = 0
a[1]=sum(result$score[1:1000])
a[2]=sum(result$score[1001:2000])
a
a[3]=sum(result$score[2001:3000])
a[4]=sum(result$score[3001:4000])
a[5]=sum(result$score[4001:5000])
a[6]=sum(result$score[5001:6000])
a[7]=sum(result$score[6001:7000])
a[8]=sum(result$score[7001:8000])
a[9]=sum(result$score[8001:9000])
a[10]=sum(result$score[9001:10000])
a[11]=sum(result$score[10001:11000])
a[12]=sum(result$score[11001:12000])
a[13]=sum(result$score[12001:13000])
a[14]=sum(result$score[13001:14000])
a[15]=sum(result$score[14001:15000])
a[16]=sum(result$score[15001:16000])
a[17]=sum(result$score[16001:1700])
a[18]=sum(result$score[17001:18000])
a[19]=sum(result$score[18001:19000])
a[20]=sum(result$score[19001:20000])
a[22]=sum(result$score[21001:22000])
a[21]=sum(result$score[20001:21000])
a[23]=sum(result$score[22001:23000])
a[24]=sum(result$score[23001:24000])
a[25]=sum(result$score[24001:25000])
a[26]=sum(result$score[25001:26472])
plot(seq(18, 24, length = 26), a, type = 'l')
plot(seq(18, 24, length = 26), a/sum(a), type = 'l', xlab = day, ylab = 'density')
plot(seq(18, 24, length = 26), a/sum(a), type = 'l', xlab = 'day', ylab = 'density')
plot(seq(18, 24, length = 26), a/sum(a), type = 'l', xlab = 'day', ylab = 'density',
main = '감성분석 점수')
plot(seq(18, 24, length = 26), a/sum(a), type = 'l', xlab = 'day', ylab = 'density',
main = '감성분석 score')
cumsum(a)
plot(seq(18, 24, length = 26), cumsum(a), type = 'l', xlab = 'day', ylab = 'density',
main = '감성분석 score')
plot(seq(18, 24, length = 26), cumsum(a), type = 'l', xlab = 'day', ylab = 'Cumulative Sum',
main = '감성분석 score')
system(command = 'r --restore --no-save <test_2.r> test_out.txt')
#setwd('C:/Users/renz/Desktop')
setwd('C:/workspace/R/7/0726')
system(command = 'r --restore --no-save <test_2.r> test_out.txt')
system(command = 'r --restore --no-save <test_2.r> test_out.txt', wait = FALSE)
system(command = 'r --restore --no-save <test_2.r> test_out.txt', wait = FALSE)
a = system('tasklist', intern = T)
a
tasklist
b <-gregexpr(" ", a[[3]])[[1]]
i = 5
substring(a[[i]],1,b[1])
substring(a[[i]],b[1]+1,b[2])
readLines(file = 'C:/workspace/R/7/0726')
readLines(file = 'C:/workspace/R/7/0726/test_1.r')
readLines(file = 'C:/workspace/R/7/0726/test_1.R')
readLines(file = 'C:/workspace/R/7/0726/test_2.R')
readLines(file = 'C:/workspace/R/7/0726/test_2.r')
readLines('C:/workspace/R/7/0726/test_2.r')
a = readLines('C:/workspace/R/7/0726/test_2.r')
a[59] = 'a - 1'
a
cat(file = 'C:/workspace/R/7/0726/test_3.r', sep = '\n')
cat(a, file = 'C:/workspace/R/7/0726/test_3.r', sep = '\n')
cat(a, file = 'C:/workspace/R/7/0726/test_3.R', sep = '\n')
