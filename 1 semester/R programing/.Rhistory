test = xgb.DMatrix(data = data.matrix(test))
pred = predict(m_xgb, test)
pred = ifelse(pred<0,0,pred)
rocgraph(pred)
cutoff_res = function(pred_prob, response, cutoff){
pred = ifelse(pred_prob> cutoff, 1, 0)
error_rate = mean(response != pred)
sensitivity = sum(response == 1 & pred == 1)/sum(response == 1)
specificity = sum(response == 0 & pred == 0)/sum(response == 0)
precision = sum(response == 1 & pred == 1)/sum(pred == 1)
recall = sensitivity
if (sum(response == 1 & pred == 1) == 0) {f1 = 0}
else {f1 = 2*(precision*recall)/(precision+recall)}
cross_table = table(response, pred)
return(list(res = c(cutoff, round(error_rate,4),
round(sensitivity,4), round(specificity,4), round(f1, 4)),
cross_table = cross_table))
}
cutoff_can = seq(0.01, 0.99, by = 0.01)
cutoff_out = t(sapply(1:length(cutoff_can),function(i) cutoff_res(pred, y_test, cutoff_can[i])[[1]]))
colnames(cutoff_out) = c("cutoff","error rate","sensitivity","specificity","f1 score")
cutoff_out[which.max(cutoff_out[,5]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,5]), 1])[[2]]
4:6
4:6,10
c(4:6,10)
library(mclust)
application = read_csv('C:/Users/renz/Documents/카카오톡 받은 파일/train.csv')
library(tidyverse)
library(caret)
# library(lightgbm)
library(knitr)
library(xgboost)
library(ggplot2)
library(magrittr)
application = read_csv('C:/Users/renz/Documents/카카오톡 받은 파일/train.csv')
application = read_csv('C:/train.csv')
application %<>% select(-c(EXT_SOURCE_1,EXT_SOURCE_2,EXT_SOURCE_3))
application %<>% select(-one_of(EXT_SOURCE_1,EXT_SOURCE_2,EXT_SOURCE_3))
application %<>% select(-one_of("EXT_SOURCE_1","EXT_SOURCE_2","EXT_SOURCE_3"))
set.seed(123)
ind = sample(nrow(application), nrow(application)*0.9, replace = F)
train = application[ind,]
test = application[-ind,]
y_test = test$TARGET
test$TARGET = NULL
glimpse(application)
colSums(is.na(application))
full <- bind_rows(train,test)
Target <- train$TARGET
Id <- test$SK_ID_CURR
full[,c('SK_ID_CURR','TARGET')] <- NULL
chr <- full[,sapply(full, is.character)]
num <- full[,sapply(full, is.numeric)]
chr[is.na(chr)] <- "Not Available"
fac <- chr %>%
lapply(as.factor) %>%
as_data_frame()
full <- bind_cols(fac, num)
rm(chr, fac, num)
full[is.na(full)] <- 0
num <- train[, sapply(train,is.numeric)]
rm(train, test)
train <- full[1:length(Target),]
test <- full[(length(Target)+1):nrow(full),]
set.seed(123)
inTrain <- createDataPartition(Target, p=.9, list = F)
tr <- train[inTrain,]
va <- train[-inTrain,]
tr_ta <- Target[inTrain]
va_ta <- Target[-inTrain]
# AUC
library(ROCR)
rocgraph <- function(pred){
# Training set
AUC = performance(prediction(pred, y_test) , "auc")
AUC@y.values # area under the curve
# ROC curve
ROC = performance(prediction(pred ,y_test) , "tpr","fpr")
plot(ROC , main = paste("ROC curve for Train data\n AUC:",
round(as.numeric(AUC@y.values),4)),
col = "blue", lwd = 2.5)
abline(c(0,0), c(1,1), lty = 2, lwd = 2)
}
dtr = xgb.DMatrix(data = data.matrix(tr), label = tr_ta)
dval = xgb.DMatrix(data = data.matrix(va), label = va_ta)
dtrain = xgb.DMatrix(data = data.matrix(rbind(tr,va)), label = c(tr_ta,va_ta))
p <- list(objective = "reg:linear",
booster = "gbtree",
eval_metric = "rmse",
nthread = 4,
eta = 0.05,
max_depth = 8,
min_child_weight = 4,
gamma = 0.1,
subsample = 0.9,
colsample_bytree = 0.5,
nrounds = 3000)
set.seed(0)
m_xgb <- xgb.train(p, dtr, p$nrounds, list(val = dval), print_every_n = 100, early_stopping_rounds = 100)
test %<>% mutate_if(is.factor, as.integer)
test = xgb.DMatrix(data = data.matrix(test))
pred = predict(m_xgb, test)
pred = ifelse(pred<0,0,pred)
rocgraph(pred)
# data.table::data.table(xgb.importance(model = m_xgb))[1:20,]
# xgb.plot.importance(data.table::data.table(xgb.importance(model = m_xgb))[1:20,])
application = read_csv('D:/application_train.csv')
library(tidyverse)
library(caret)
# library(lightgbm)
library(knitr)
library(xgboost)
library(ggplot2)
library(magrittr)
application = read_csv('D:/application_train.csv')
application = read_csv('D:/application_train.csv')
application %<>% select(-c(EXT_SOURCE_1,EXT_SOURCE_2,EXT_SOURCE_3))
set.seed(123)
ind = sample(nrow(application), nrow(application)*0.9, replace = F)
train = application[ind,]
test = application[-ind,]
y_test = test$TARGET
test$TARGET = NULL
full <- bind_rows(train,test)
Target <- train$TARGET
Id <- test$SK_ID_CURR
full[,c('SK_ID_CURR','TARGET')] <- NULL
chr <- full[,sapply(full, is.character)]
num <- full[,sapply(full, is.numeric)]
chr[is.na(chr)] <- "Not Available"
fac <- chr %>%
lapply(as.factor) %>%
as_data_frame()
full <- bind_cols(fac, num)
rm(chr, fac, num)
full[is.na(full)] <- 0
num <- train[, sapply(train,is.numeric)]
rm(train, test)
train <- full[1:length(Target),]
test <- full[(length(Target)+1):nrow(full),]
set.seed(123)
inTrain <- createDataPartition(Target, p=.9, list = F)
tr <- train[inTrain,]
va <- train[-inTrain,]
tr_ta <- Target[inTrain]
va_ta <- Target[-inTrain]
cutoff_res = function(pred_prob, response, cutoff){
pred = ifelse(pred_prob> cutoff, 1, 0)
error_rate = mean(response != pred)
sensitivity = sum(response == 1 & pred == 1)/sum(response == 1)
specificity = sum(response == 0 & pred == 0)/sum(response == 0)
precision = sum(response == 1 & pred == 1)/sum(pred == 1)
recall = sensitivity
if (sum(response == 1 & pred == 1) == 0) {f1 = 0}
else {f1 = 2*(precision*recall)/(precision+recall)}
cross_table = table(response, pred)
return(list(res = c(cutoff, round(error_rate,4),
round(sensitivity,4), round(specificity,4), round(f1, 4)),
cross_table = cross_table))
}
# AUC
library(ROCR)
rocgraph <- function(pred){
# Training set
AUC = performance(prediction(pred, y_test) , "auc")
AUC@y.values # area under the curve
# ROC curve
ROC = performance(prediction(pred ,y_test) , "tpr","fpr")
plot(ROC , main = paste("ROC curve for Train data\n AUC:",
round(as.numeric(AUC@y.values),4)),
col = "blue", lwd = 2.5)
abline(c(0,0), c(1,1), lty = 2, lwd = 2)
}
dtr = xgb.DMatrix(data = data.matrix(tr), label = tr_ta)
dval = xgb.DMatrix(data = data.matrix(va), label = va_ta)
dtrain = xgb.DMatrix(data = data.matrix(rbind(tr,va)), label = c(tr_ta,va_ta))
p <- list(objective = "reg:linear",
booster = "gbtree",
eval_metric = "rmse",
nthread = 4,
eta = 0.05,
max_depth = 8,
min_child_weight = 4,
gamma = 0.1,
subsample = 0.9,
colsample_bytree = 0.5,
nrounds = 3000)
set.seed(0)
m_xgb <- xgb.train(p, dtr, p$nrounds, list(val = dval), print_every_n = 100, early_stopping_rounds = 100)
test %<>% mutate_if(is.factor, as.integer)
test = xgb.DMatrix(data = data.matrix(test))
pred = predict(m_xgb, test)
pred = ifelse(pred<0,0,pred)
rocgraph(pred)
# data.table::data.table(xgb.importance(model = m_xgb))[1:20,]
# xgb.plot.importance(data.table::data.table(xgb.importance(model = m_xgb))[1:20,])
cutoff_can = seq(0.01, 0.99, by = 0.01)
cutoff_out = t(sapply(1:length(cutoff_can),function(i) cutoff_res(pred, y_test, cutoff_can[i])[[1]]))
colnames(cutoff_out) = c("cutoff","error rate","sensitivity","specificity","f1 score")
cutoff_out[which.max(cutoff_out[,5]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,5]), 1])[[2]]
3736/(24595+3736)
24595/(24595+3736)
1535/(24595+1535)
886/(3736+886)
886/(1535+886)
20^(1/5)
10^(1/5)
application = read_csv('D:/application_train.csv')
library(tidyverse)
library(caret)
# library(lightgbm)
library(knitr)
library(xgboost)
library(ggplot2)
library(magrittr)
# AUC
library(ROCR)
# Training set
AUC = performance(prediction(predictions$X0, y_test) , "auc")
application = read_csv('D:/application_train.csv')
application %<>% select(-c(EXT_SOURCE_1,EXT_SOURCE_2,EXT_SOURCE_3))
set.seed(123)
ind = sample(nrow(application), nrow(application)*0.9, replace = F)
train = application[ind,]
test = application[-ind,]
y_test = test$TARGET
test$TARGET = NULL
full <- bind_rows(train,test)
Target <- train$TARGET
Id <- test$SK_ID_CURR
full[,c('SK_ID_CURR','TARGET')] <- NULL
chr <- full[,sapply(full, is.character)]
num <- full[,sapply(full, is.numeric)]
chr[is.na(chr)] <- "Not Available"
fac <- chr %>%
lapply(as.factor) %>%
as_data_frame()
full <- bind_cols(fac, num)
rm(chr, fac, num)
full[is.na(full)] <- 0
num <- train[, sapply(train,is.numeric)]
rm(train, test)
train <- full[1:length(Target),]
test <- full[(length(Target)+1):nrow(full),]
set.seed(123)
inTrain <- createDataPartition(Target, p=.9, list = F)
tr <- train[inTrain,]
va <- train[-inTrain,]
tr_ta <- Target[inTrain]
va_ta <- Target[-inTrain]
dtr = xgb.DMatrix(data = data.matrix(tr), label = tr_ta)
dval = xgb.DMatrix(data = data.matrix(va), label = va_ta)
dtrain = xgb.DMatrix(data = data.matrix(rbind(tr,va)), label = c(tr_ta,va_ta))
p <- list(objective = "reg:linear",
booster = "gbtree",
eval_metric = "rmse",
nthread = 4,
eta = 0.05,
max_depth = 8,
min_child_weight = 4,
gamma = 0.1,
subsample = 0.9,
colsample_bytree = 0.5,
nrounds = 3000)
set.seed(0)
m_xgb <- xgb.train(p, dtr, p$nrounds, list(val = dval), print_every_n = 100, early_stopping_rounds = 100)
test %<>% mutate_if(is.factor, as.integer)
test = xgb.DMatrix(data = data.matrix(test))
pred = predict(m_xgb, test)
pred = ifelse(pred<0,0,pred)
rocgraph(pred)
# AUC
library(ROCR)
rocgraph <- function(pred){
# Training set
AUC = performance(prediction(pred, y_test) , "auc")
AUC@y.values # area under the curve
# ROC curve
ROC = performance(prediction(pred ,y_test) , "tpr","fpr")
plot(ROC , main = paste("ROC curve for Train data\n AUC:",
round(as.numeric(AUC@y.values),4)),
col = "blue", lwd = 2.5)
abline(c(0,0), c(1,1), lty = 2, lwd = 2)
}
cutoff_res = function(pred_prob, response, cutoff){
pred = ifelse(pred_prob> cutoff, 1, 0)
error_rate = mean(response != pred)
sensitivity = sum(response == 1 & pred == 1)/sum(response == 1)
specificity = sum(response == 0 & pred == 0)/sum(response == 0)
precision = sum(response == 1 & pred == 1)/sum(pred == 1)
recall = sensitivity
if (sum(response == 1 & pred == 1) == 0) {f1 = 0}
else {f1 = 2*(precision*recall)/(precision+recall)}
cross_table = table(response, pred)
return(list(res = c(cutoff, round(error_rate,4),
round(sensitivity,4), round(specificity,4), round(f1, 4)),
cross_table = cross_table))
}
cutoff_can = seq(0.01, 0.99, by = 0.01)
cutoff_out = t(sapply(1:length(cutoff_can),function(i) cutoff_res(pred, y_test, cutoff_can[i])[[1]]))
colnames(cutoff_out) = c("cutoff","error rate","sensitivity","specificity","f1 score")
cutoff_out[which.max(cutoff_out[,5]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])[[2]]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])[[2]]
cutoff_out[which.max(cutoff_out[,5]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])[[2]]
cutoff_out[which.max(cutoff_out[,5]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,5]), 1])[[2]]
cutoff_out[which.max(cutoff_out[,3]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,3]), 1])[[2]]
cutoff_can = seq(0.01, 0.99, by = 0.01)
cutoff_out = t(sapply(1:length(cutoff_can),function(i) cutoff_res(pred, y_test, cutoff_can[i])[[1]]))
colnames(cutoff_out) = c("cutoff","error rate","sensitivity","specificity","f1 score")
cutoff_out[which.max(cutoff_out[,4]),]
cutoff_res(pred, y_test, cutoff_out[which.max(cutoff_out[,4]), 1])[[2]]
test_y
y_test
test
test <- full[(length(Target)+1):nrow(full),]
test
test$DAYS_BIRTH
barplot(table(test$DAYS_BIRTH/-365))
barplot(table(round(test$DAYS_BIRTH/-365),0))
barplot(table(round(test$DAYS_BIRTH/-365)),0))
round(test$DAYS_BIRTH/-365)),0)
barplot(table(round(test$DAYS_BIRTH/-365,0)))
table(round(test$DAYS_BIRTH/-365,0))
barplot(table(round(test$DAYS_BIRTH/-365,0)))
pred
round(pred,2)
cbind(round(test$DAYS_BIRTH/-365,0), round(pred,2))
agepred = cbind(round(test$DAYS_BIRTH/-365,0), round(pred,2))
agepred
colnames(agepred) <- c("age", "prob")
colnames(agepred)
agepred
agepred %>% group_by(age)
agepred %>% group_by(age) %>% summarise(prob = mean(prob))
agepred %>% group_by(age)
data.frame(agepred) %>% group_by(age) %>% summarise(prob = mean(prob))
agepred %>% data.frame() %>% group_by(age)
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob))
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob)) %>% round(2)
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = mean_prob)) %>% geom_line()
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = mean_prob))
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = mean_prob)) %>% geom_bar()
agepred %>% data.frame() %>% group_by(age) %>% summarise(mean_prob = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = mean_prob)) + geom_line()
agepred %>% data.frame() %>% group_by(age) %>% summarise("1 predict" = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = "1 predict")) + geom_line()
agepred %>% data.frame() %>% group_by(age) %>% summarise(1_predict = mean(prob)) %>% round(2) %>%
agepred %>% data.frame() %>% group_by(age) %>% summarise(1_predict = mean(prob)) %>% round(2) %>%
agepred %>% data.frame() %>% group_by(age) %>% summarise(predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = predict_1)) + geom_line()
agepred %>% data.frame() %>% group_by(age) %>% summarise(predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = predict_1)) + geom_line() + theme_bw()
agepred %>% data.frame() %>% group_by(age) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = prob_predict_1)) + geom_line() + theme_bw()
test$DAYS_ID_PUBLISH
round(test$DAYS_ID_PUBLISH/-365,0)
agepred = cbind(round(test$DAYS_ID_PUBLISH/-365,0), round(pred,2))
colnames(agepred) <- c("age", "prob")
agepred %>% data.frame() %>% group_by(age) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = prob_predict_1)) + geom_line() + theme_bw()
colnames(agepred) <- c("DAYS_ID_PUBLISH", "prob")
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2)
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
filter(DAYS_ID_PUBLISH<20) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
test$AMT_ANNUITY
agepred = cbind(test$AMT_ANNUITY, round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(test$AMT_ANNUITY, round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_ID_PUBLISH/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_ID_PUBLISH", "prob")
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
filter(DAYS_ID_PUBLISH<20) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
round(test$AMT_ANNUITY,-2)
agepred = cbind(round(test$AMT_ANNUITY,-2), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-3), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_sommth() + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_smooth() + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line) + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line()) + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_smooth() + theme_bw()
agepred = cbind(round(test$DAYS_BIRTH/-365,0), round(pred,2))
colnames(agepred) <- c("age", "prob")
agepred %>% data.frame() %>% group_by(age) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = prob_predict_1)) + geom_smooth() + theme_bw()
agepred = cbind(round(test$DAYS_ID_PUBLISH/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_ID_PUBLISH", "prob")
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
filter(DAYS_ID_PUBLISH<20) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_smooth() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-3), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_smooth() + theme_bw()
agepred = cbind(round(test$DAYS_BIRTH/-365,0), round(pred,2))
colnames(agepred) <- c("age", "prob")
agepred %>% data.frame() %>% group_by(age) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_ID_PUBLISH/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_ID_PUBLISH", "prob")
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
filter(DAYS_ID_PUBLISH<20) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-3), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-4), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-2), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-3), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-4), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
round(test$DAYS_LAST_PHONE_CHANGE,-4)
test$DAYS_LAST_PHONE_CHANGE
test$AMT_ANNUITY
agepred = cbind(round(test$DAYS_LAST_PHONE_CHANGE/-365, 0), round(pred,2))
colnames(agepred) <- c("DAYS_LAST_PHONE_CHANGE", "prob")
agepred %>% data.frame() %>% group_by(DAYS_LAST_PHONE_CHANGE) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_LAST_PHONE_CHANGE, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(test$DAYS_LAST_PHONE_CHANGE/-365, round(pred,2))
colnames(agepred) <- c("DAYS_LAST_PHONE_CHANGE", "prob")
agepred %>% data.frame() %>% group_by(DAYS_LAST_PHONE_CHANGE) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_LAST_PHONE_CHANGE, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_LAST_PHONE_CHANGE/-365,1), round(pred,2))
colnames(agepred) <- c("DAYS_LAST_PHONE_CHANGE", "prob")
agepred %>% data.frame() %>% group_by(DAYS_LAST_PHONE_CHANGE) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_LAST_PHONE_CHANGE, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_LAST_PHONE_CHANGE/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_LAST_PHONE_CHANGE", "prob")
agepred %>% data.frame() %>% group_by(DAYS_LAST_PHONE_CHANGE) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_LAST_PHONE_CHANGE, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_BIRTH/-365,0), round(pred,2))
colnames(agepred) <- c("age", "prob")
agepred %>% data.frame() %>% group_by(age) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = age, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_ID_PUBLISH/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_ID_PUBLISH", "prob")
agepred %>% data.frame() %>% group_by(DAYS_ID_PUBLISH) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
filter(DAYS_ID_PUBLISH<20) %>%
ggplot(aes(x = DAYS_ID_PUBLISH, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$AMT_ANNUITY,-4), round(pred,2))
colnames(agepred) <- c("AMT_ANNUITY", "prob")
agepred %>% data.frame() %>% group_by(AMT_ANNUITY) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = AMT_ANNUITY, y = prob_predict_1)) + geom_line() + theme_bw()
agepred = cbind(round(test$DAYS_LAST_PHONE_CHANGE/-365,0), round(pred,2))
colnames(agepred) <- c("DAYS_LAST_PHONE_CHANGE", "prob")
agepred %>% data.frame() %>% group_by(DAYS_LAST_PHONE_CHANGE) %>% summarise(prob_predict_1 = mean(prob)) %>% round(2) %>%
ggplot(aes(x = DAYS_LAST_PHONE_CHANGE, y = prob_predict_1)) + geom_line() + theme_bw()
library(tidyverse)
library(caret)
# library(lightgbm)
library(knitr)
library(xgboost)
library(ggplot2)
library(magrittr)
application = read_csv('D:/application_train.csv')
glimpse(application)
nrow(application)/application$SK_ID_CURR
nrow(application)/length(application$SK_ID_CURR)
data(boston)
library(ISLR)
data(boston)
data(Boston)
library(MASS)
data(Boston)
Boston
write.csv(Boston, "d:/boston.csv")
pi
sin(2*pi*1)
